% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autoReport.R
\name{autoReport}
\alias{autoReport}
\alias{autoReportUI}
\alias{autoReportOrgInput}
\alias{autoReportOrgServer}
\alias{autoReportFormatInput}
\alias{autoReportFormatSercer}
\alias{autoReportInput}
\alias{autoReportServer}
\alias{autoReportApp}
\alias{orgList2df}
\alias{autoReportFormatServer}
\title{Shiny modules and helper functions for registry auto reports}
\usage{
autoReportUI(id)

autoReportOrgInput(id)

autoReportOrgServer(id, orgs)

autoReportFormatInput(id)

autoReportFormatServer(id)

autoReportInput(id)

autoReportServer(
  id,
  registryName,
  type,
  paramValues,
  reports = NULL,
  orgs = NULL
)

autoReportApp(
  registryName = "rapbase",
  type = "subscription",
  reports = NULL,
  orgs = NULL
)

orgList2df(orgs)
}
\arguments{
\item{id}{Character string providing the shiny module id.}

\item{orgs}{Named list of organizations (names) and ids (values). When set to
\code{NULL} (default) the ids found in auto report data will be used in the
table listing existing auto reports.}

\item{registryName}{Character string with the registry name key. Must
correspond to the registry R package name.}

\item{type}{Character string defining the type of auto reports. Must be one
of \code{c("subscription", "dispatchment", "bulletin")}}

\item{reports}{List of a given structure that provides meta data for the
reports that are made available as automated reports. See Details for further
description.}

\item{org}{Shiny reactive value providing the organization id for the auto
report. To be used when auto report function arguments will be a reactive
part of the auto report application.}
}
\value{
In general, shiny objects. In particular, \code{autoreportOrgServer}
returns a list with names "name" and "value" with corresponding reactive
values for the selected organization name and id. This may be used when
parameter values of auto report functions needs to be altered at application
run time. \code{orgList2df} returns a data frame with columns "name" and
"id".
}
\description{
These shiny modules may be used to set up auto reporting from registries at
Rapporteket.
}
\details{
The \emph{reports} argument must be a list where each entry
represents one report and its name will be used in the auto report user
interface for selecting reports, \emph{e.g.}
\code{reports = list(MagicReport = ...)} will produce the entry "MagicReport"
in the GUI selectable reports. The value of each entry must be another list
with the following names and values:
\describe{
  \item{synopsis}{character string describing the report}
  \item{fun}{report function base name (without"()")}
  \item{paramNames}{character vector naming all arguments of \emph{fun}}
  \item{paramValues}{vector with values corresponding to \emph{paramNames}}
}
These named values will be used to run reports none-interactively on a given
schedule and must therefore represent existing and exported functions from
the registry R package. For subscriptions the \emph{reports} list can be used
as is, more specifically that the values provided in \emph{paramValues} can
go unchanged. For dispatchments and bulletins it is likely that parameter
values must be set dynamically in which case \emph{paramValues} must be
a reactive part of the application. See Examples on how function arguments
may be used as reactives in an application.
}
\examples{
## make a list for report metadata
reports <- list(
  FirstReport = list(
    synopsis = "First example report",
    fun = "fun1",
    paramNames = c("organization", "outputFormat"),
    paramValues = c(111111, "html")
  ),
  SecondReport = list(
    synopsis = "Second example report",
    fun = "fun2",
    paramNames = c("organization", "outputFormat"),
    paramValues = c(111111, "pdf")
  )
)

## make a list of organization names and numbers
orgs <- list(
  OrgOne = 111111,
  OrgTwo = 222222
)

## client user interface function
ui <- shiny::fluidPage(
  shiny::sidebarLayout(
    autoReportOrgInput("test"),
    autoReportFormatInput("test"),
    shiny::sidebarPanel(autoReportInput("test")),
    shiny::mainPanel(autoReportUI("test"))
  )
)

## server function
server <- function(input, output, session) {
  org <- autoReportOrgServer("test", orgs)
  format <- autoReportFormatServer("test")

  ## set reactive paramValues overriding those in the reports list
  paramValues <- shiny::reactive(c(org$value(), format()))

  autoReportServer(
    id = "test", registryName = registryName, type = type, org = org$value,
    paramValues = paramValues, reports = reports, orgs = orgs
  )
}

# run the shiny app in an interactive environment
if (interactive()) {
  shiny::shinyApp(ui, server)
}
}
